/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
*/

#include <Arduino.h>
#include <tcMenu.h>
#include "Menu_Test_menu.h"

// Global variable declarations

const PROGMEM ConnectorLocalInfo applicationInfo = { "Riverbend Wells", "201efad0-f2b7-4c8f-a7ad-a27aa5b60ea5" };
LiquidCrystal lcd(0, 1, 2, 4, 5, 6, 7);
LiquidCrystalRenderer renderer(lcd, 20, 4);

// Global Menu Item declarations

RENDERING_CALLBACK_NAME_INVOKE(fnTimeRtCall, timeItemRenderFn, "Time", -1, onTimeChanged)
TimeFormattedMenuItem menuTime(fnTimeRtCall, 26, (MultiEditWireType)EDITMODE_TIME_24H, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnDateRtCall, dateItemRenderFn, "Date", -1, onDateChanged)
DateFormattedMenuItem menuDate(fnDateRtCall, 25, &menuTime);
const SubMenuInfo PROGMEM minfoSetDateTime = { "Set Date/Time", 27, 0xFFFF, 0, onSetDatetimeChanged };
RENDERING_CALLBACK_NAME_INVOKE(fnSetDateTimeRtCall, backSubItemRenderFn, "Set Date/Time", -1, onSetDatetimeChanged)
BackMenuItem menuBackSetDateTime(fnSetDateTimeRtCall, &menuDate);
SubMenuItem menuSetDateTime(&minfoSetDateTime, &menuBackSetDateTime, NULL);
const AnyMenuInfo PROGMEM minfoDisableIO = { "DisableIO", 30, 0xFFFF, 0, ondisableIOChanged };
ActionMenuItem menuDisableIO(&minfoDisableIO, NULL);
const AnyMenuInfo PROGMEM minfoBacklightOnOff = { "Backlight on/off", 28, 0xFFFF, 0, onBacklighChanged };
ActionMenuItem menuBacklightOnOff(&minfoBacklightOnOff, &menuDisableIO);
const AnyMenuInfo PROGMEM minfoSendSatMsg = { "Send Sat Msg", 24, 0xFFFF, 0, onSatMsgChanged };
ActionMenuItem menuSendSatMsg(&minfoSendSatMsg, &menuBacklightOnOff);
const AnyMenuInfo PROGMEM minfoTestPumpRelay = { "Test Pump Relay", 12, 0xFFFF, 0, onPumpRelayChanged };
ActionMenuItem menuTestPumpRelay(&minfoTestPumpRelay, &menuSendSatMsg);
const SubMenuInfo PROGMEM minfoSelfTests = { "Self Tests", 11, 0xFFFF, 0, onSelftestChanged };
RENDERING_CALLBACK_NAME_INVOKE(fnSelfTestsRtCall, backSubItemRenderFn, "Self Tests", -1, onSelftestChanged)
BackMenuItem menuBackSelfTests(fnSelfTestsRtCall, &menuTestPumpRelay);
SubMenuItem menuSelfTests(&minfoSelfTests, &menuBackSelfTests, &menuSetDateTime);
const BooleanMenuInfo PROGMEM minfoFuelLow = { "Fuel Low", 21, 0xFFFF, 1, NO_CALLBACK, NAMING_TRUE_FALSE };
BooleanMenuItem menuFuelLow(&minfoFuelLow, false, NULL);
const FloatMenuInfo PROGMEM minfoBattery = { "Battery", 22, 0xFFFF, 2, NO_CALLBACK };
FloatMenuItem menuBattery(&minfoBattery, &menuFuelLow);
const BooleanMenuInfo PROGMEM minfoTankFull = { "Tank Full", 19, 0xFFFF, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuTankFull(&minfoTankFull, false, &menuBattery);
const BooleanMenuInfo PROGMEM minfoStorageEmpty = { "Storage Empty", 17, 0xFFFF, 1, storageEmptyChanged, NAMING_ON_OFF };
BooleanMenuItem menuStorageEmpty(&minfoStorageEmpty, false, &menuTankFull);
const BooleanMenuInfo PROGMEM minfoStorageFull = { "Storage Full", 18, 0xFFFF, 1, onStorageFullChanged, NAMING_ON_OFF };
BooleanMenuItem menuStorageFull(&minfoStorageFull, false, &menuStorageEmpty);
const SubMenuInfo PROGMEM minfoStatus = { "Status", 3, 0xFFFF, 0, onStatusChanged };
RENDERING_CALLBACK_NAME_INVOKE(fnStatusRtCall, backSubItemRenderFn, "Status", -1, onStatusChanged)
BackMenuItem menuBackStatus(fnStatusRtCall, &menuStorageFull);
SubMenuItem menuStatus(&minfoStatus, &menuBackStatus, &menuSelfTests);
const AnalogMenuInfo PROGMEM minfoRetrys = { "Retrys", 16, 0xFFFF, 5, onRetrysChanged, 2, 0, "" };
AnalogMenuItem menuRetrys(&minfoRetrys, 0, NULL);
const AnalogMenuInfo PROGMEM minfoStartTime = { "Start Time", 15, 0xFFFF, 8, onStartTimeChanged, 2, 0, " S." };
AnalogMenuItem menuStartTime(&minfoStartTime, 0, &menuRetrys);
const AnyMenuInfo PROGMEM minfoStop = { "Stop", 14, 0xFFFF, 0, onGeneratorStop };
ActionMenuItem menuStop(&minfoStop, &menuStartTime);
const AnyMenuInfo PROGMEM minfoStart = { "Start", 13, 0xFFFF, 0, onGeneratorStart };
ActionMenuItem menuStart(&minfoStart, &menuStop);
const BooleanMenuInfo PROGMEM minfoRunning = { "Running", 23, 0xFFFF, 1, onGeneratorRunningChanged, NAMING_ON_OFF };
BooleanMenuItem menuRunning(&minfoRunning, false, &menuStart);
const SubMenuInfo PROGMEM minfoGenerator = { "Generator", 1, 0xFFFF, 0, onGeneratorChanged };
RENDERING_CALLBACK_NAME_INVOKE(fnGeneratorRtCall, backSubItemRenderFn, "Generator", -1, onGeneratorChanged)
BackMenuItem menuBackGenerator(fnGeneratorRtCall, &menuRunning);
SubMenuItem menuGenerator(&minfoGenerator, &menuBackGenerator, &menuStatus);
const char enumStrMode_0[] PROGMEM  = "IDLE";
const char enumStrMode_1[] PROGMEM  = "START";
const char enumStrMode_2[] PROGMEM  = "READY";
const char enumStrMode_3[] PROGMEM  = "FILLING";
const char enumStrMode_4[] PROGMEM  = "STOPPED";
const char enumStrMode_5[] PROGMEM  = "FAULT";
const char* const enumStrMode[] PROGMEM  = { enumStrMode_0, enumStrMode_1, enumStrMode_2, enumStrMode_3, enumStrMode_4, enumStrMode_5 };
const EnumMenuInfo PROGMEM minfoMode = { "Mode", 29, 0xFFFF, 5, NO_CALLBACK, enumStrMode };
EnumMenuItem menuMode(&minfoMode, 0, &menuGenerator);


// Set up code

void setupMenu() {
    menuMode.setReadOnly(true);
    menuTankFull.setReadOnly(true);
    menuBattery.setReadOnly(true);
    menuFuelLow.setReadOnly(true);

    Wire.begin();
    lcd.setIoAbstraction(ioFrom8574(0x27, 0xff, &Wire));
    lcd.begin(20, 4);
    lcd.configureBacklightPin(3);
    lcd.backlight();
    switches.initialise(internalDigitalIo(), true);
    menuMgr.initForEncoder(&renderer, &menuMode, 2, 3, 8);
}
